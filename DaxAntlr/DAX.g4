grammar DAX;

options
{
	language = CSharp;
}

line: (TABLE_EXPRESSION)* EOF;

TABLE_EXPRESSION: TABLE_OR_VARIABLE |
	(TREATAS OPEN_PARENS TABLE_EXPRESSION COMMA COLUMNS CLOSE_PARENS);

COLUMNS: COLUMN_OR_MEASURE | COLUMN_OR_MEASURE (COMMA COLUMN_OR_MEASURE)+;

SINGLE_LINE_COMMENT: ( '//' | '--') InputCharacter*;
DELIMITED_COMMENT:
	'/*' (DELIMITED_COMMENT | '/' ~'*' | ~'/')*? ('*/' | EOF);

WHITESPACES: (Whitespace | NewLine)+;

ABS: 'ABS';
ACOS: 'ACOS';
ACOSH: 'ACOSH';
ACOT: 'ACOT';
ACOTH: 'ACOTH';
ADDCOLUMNS: 'ADDCOLUMNS';
ADDMISSINGITEMS: 'ADDMISSINGITEMS';
ALL: 'ALL';
ALLCROSSFILTERED: 'ALLCROSSFILTERED';
ALLEXCEPT: 'ALLEXCEPT';
ALLNOBLANKROW: 'ALLNOBLANKROW';
ALLSELECTED: 'ALLSELECTED';
AND: 'AND';
APPROXIMATEDISTINCTCOUNT: 'APPROXIMATEDISTINCTCOUNT';
ASIN: 'ASIN';
ASINH: 'ASINH';
ATAN: 'ATAN';
ATANH: 'ATANH';
AVERAGE: 'AVERAGE';
AVERAGEA: 'AVERAGEA';
AVERAGEX: 'AVERAGEX';
BETADIST: 'BETA.DIST';
BETAINV: 'BETA.INV';
BLANK: 'BLANK';
CALCULATE: 'CALCULATE';
CALCULATETABLE: 'CALCULATETABLE';
CALENDAR: 'CALENDAR';
CALENDARAUTO: 'CALENDARAUTO';
CEILING: 'CEILING';
CHISQDIST: 'CHISQ.DIST';
CHISQDISTRT: 'CHISQ.DIST.RT';
CHISQINV: 'CHISQ.INV';
CHISQINVRT: 'CHISQ.INV.RT';
CLOSINGBALANCEMONTH: 'CLOSINGBALANCEMONTH';
CLOSINGBALANCEQUARTER: 'CLOSINGBALANCEQUARTER';
CLOSINGBALANCEYEAR: 'CLOSINGBALANCEYEAR';
COALESCE: 'COALESCE';
COMBIN: 'COMBIN';
COMBINA: 'COMBINA';
COMBINEVALUES: 'COMBINEVALUES';
CONCATENATE: 'CONCATENATE';
CONCATENATEX: 'CONCATENATEX';
CONFIDENCENORM: 'CONFIDENCE.NORM';
CONFIDENCET: 'CONFIDENCE.T';
CONTAINS: 'CONTAINS';
CONTAINSROW: 'CONTAINSROW';
CONTAINSSTRING: 'CONTAINSSTRING';
CONTAINSSTRINGEXACT: 'CONTAINSSTRINGEXACT';
CONVERT: 'CONVERT';
COS: 'COS';
COSH: 'COSH';
COT: 'COT';
COTH: 'COTH';
COUNT: 'COUNT';
COUNTA: 'COUNTA';
COUNTAX: 'COUNTAX';
COUNTBLANK: 'COUNTBLANK';
COUNTROWS: 'COUNTROWS';
COUNTX: 'COUNTX';
CROSSFILTER: 'CROSSFILTER';
CROSSJOIN: 'CROSSJOIN';
CURRENCY: 'CURRENCY';
CURRENTGROUP: 'CURRENTGROUP';
CUSTOMDATA: 'CUSTOMDATA';
DATATABLE: 'DATATABLE';
DATE: 'DATE';
DATEADD: 'DATEADD';
DATEDIFF: 'DATEDIFF';
DATESBETWEEN: 'DATESBETWEEN';
DATESINPERIOD: 'DATESINPERIOD';
DATESMTD: 'DATESMTD';
DATESQTD: 'DATESQTD';
DATESYTD: 'DATESYTD';
DATEVALUE: 'DATEVALUE';
DAY: 'DAY';
DEGREES: 'DEGREES';
DETAILROWS: 'DETAILROWS';
DISTINCT: 'DISTINCT';
DISTINCTCOUNT: 'DISTINCTCOUNT';
DISTINCTCOUNTNOBLANK: 'DISTINCTCOUNTNOBLANK';
DIVIDE: 'DIVIDE';
EARLIER: 'EARLIER';
EARLIEST: 'EARLIEST';
EDATE: 'EDATE';
ENDOFMONTH: 'ENDOFMONTH';
ENDOFQUARTER: 'ENDOFQUARTER';
ENDOFYEAR: 'ENDOFYEAR';
EOMONTH: 'EOMONTH';
ERROR: 'ERROR';
EVEN: 'EVEN';
EXACT: 'EXACT';
EXCEPT: 'EXCEPT';
EXP: 'EXP';
EXPONDIST: 'EXPON.DIST';
FACT: 'FACT';
FALSE: 'FALSE';
FILTER: 'FILTER';
FILTERS: 'FILTERS';
FIND: 'FIND';
FIRSTDATE: 'FIRSTDATE';
FIRSTNONBLANK: 'FIRSTNONBLANK';
FIRSTNONBLANKVALUE: 'FIRSTNONBLANKVALUE';
FIXED: 'FIXED';
FLOOR: 'FLOOR';
FORMAT: 'FORMAT';
GCD: 'GCD';
GENERATE: 'GENERATE';
GENERATEALL: 'GENERATEALL';
GENERATESERIES: 'GENERATESERIES';
GEOMEAN: 'GEOMEAN';
GEOMEANX: 'GEOMEANX';
GROUPBY: 'GROUPBY';
HASONEFILTER: 'HASONEFILTER';
HASONEVALUE: 'HASONEVALUE';
HOUR: 'HOUR';
IF: 'IF';
IFEAGER: 'IF.EAGER';
IFERROR: 'IFERROR';
IGNORE: 'IGNORE';
INT: 'INT';
INTERSECT: 'INTERSECT';
ISBLANK: 'ISBLANK';
ISCROSSFILTERED: 'ISCROSSFILTERED';
ISEMPTY: 'ISEMPTY';
ISERROR: 'ISERROR';
ISEVEN: 'ISEVEN';
ISFILTERED: 'ISFILTERED';
ISINSCOPE: 'ISINSCOPE';
ISLOGICAL: 'ISLOGICAL';
ISNONTEXT: 'ISNONTEXT';
ISNUMBER: 'ISNUMBER';
ISOCEILING: 'ISO.CEILING';
ISODD: 'ISODD';
ISONORAFTER: 'ISONORAFTER';
ISSELECTEDMEASURE: 'ISSELECTEDMEASURE';
ISSUBTOTAL: 'ISSUBTOTAL';
ISTEXT: 'ISTEXT';
KEEPFILTERS: 'KEEPFILTERS';
KEYWORDMATCH: 'KEYWORDMATCH';
LASTDATE: 'LASTDATE';
LASTNONBLANK: 'LASTNONBLANK';
LASTNONBLANKVALUE: 'LASTNONBLANKVALUE';
LCM: 'LCM';
LEFT: 'LEFT';
LEN: 'LEN';
LN: 'LN';
LOG: 'LOG';
LOG10: 'LOG10';
LOOKUPVALUE: 'LOOKUPVALUE';
LOWER: 'LOWER';
MAX: 'MAX';
MAXA: 'MAXA';
MAXX: 'MAXX';
MEDIAN: 'MEDIAN';
MEDIANX: 'MEDIANX';
MID: 'MID';
MIN: 'MIN';
MINA: 'MINA';
MINUTE: 'MINUTE';
MINX: 'MINX';
MOD: 'MOD';
MONTH: 'MONTH';
MROUND: 'MROUND';
NATURALINNERJOIN: 'NATURALINNERJOIN';
NATURALLEFTOUTERJOIN: 'NATURALLEFTOUTERJOIN';
NEXTDAY: 'NEXTDAY';
NEXTMONTH: 'NEXTMONTH';
NEXTQUARTER: 'NEXTQUARTER';
NEXTYEAR: 'NEXTYEAR';
NONVISUAL: 'NONVISUAL';
NORMDIST: 'NORM.DIST';
NORMINV: 'NORM.INV';
NORMSDIST: 'NORM.S.DIST';
NORMSINV: 'NORM.S.INV';
NOT: 'NOT';
NOW: 'NOW';
ODD: 'ODD';
OPENINGBALANCEMONTH: 'OPENINGBALANCEMONTH';
OPENINGBALANCEQUARTER: 'OPENINGBALANCEQUARTER';
OPENINGBALANCEYEAR: 'OPENINGBALANCEYEAR';
OR: 'OR';
PARALLELPERIOD: 'PARALLELPERIOD';
PATH: 'PATH';
PATHCONTAINS: 'PATHCONTAINS';
PATHITEM: 'PATHITEM';
PATHITEMREVERSE: 'PATHITEMREVERSE';
PATHLENGTH: 'PATHLENGTH';
PERCENTILEEXC: 'PERCENTILE.EXC';
PERCENTILEINC: 'PERCENTILE.INC';
PERCENTILEXEXC: 'PERCENTILEX.EXC';
PERCENTILEXINC: 'PERCENTILEX.INC';
PERMUT: 'PERMUT';
PI: 'PI';
POISSONDIST: 'POISSON.DIST';
POWER: 'POWER';
PREVIOUSDAY: 'PREVIOUSDAY';
PREVIOUSMONTH: 'PREVIOUSMONTH';
PREVIOUSQUARTER: 'PREVIOUSQUARTER';
PREVIOUSYEAR: 'PREVIOUSYEAR';
PRODUCT: 'PRODUCT';
PRODUCTX: 'PRODUCTX';
QUARTER: 'QUARTER';
QUOTIENT: 'QUOTIENT';
RADIANS: 'RADIANS';
RAND: 'RAND';
RANDBETWEEN: 'RANDBETWEEN';
RANKEQ: 'RANK.EQ';
RANKX: 'RANKX';
RELATED: 'RELATED';
RELATEDTABLE: 'RELATEDTABLE';
REMOVEFILTERS: 'REMOVEFILTERS';
REPLACE: 'REPLACE';
REPT: 'REPT';
RIGHT: 'RIGHT';
ROLLUP: 'ROLLUP';
ROLLUPADDISSUBTOTAL: 'ROLLUPADDISSUBTOTAL';
ROLLUPGROUP: 'ROLLUPGROUP';
ROLLUPISSUBTOTAL: 'ROLLUPISSUBTOTAL';
ROUND: 'ROUND';
ROUNDDOWN: 'ROUNDDOWN';
ROUNDUP: 'ROUNDUP';
ROW: 'ROW';
SAMEPERIODLASTYEAR: 'SAMEPERIODLASTYEAR';
SAMPLE: 'SAMPLE';
SEARCH: 'SEARCH';
SECOND: 'SECOND';
SELECTCOLUMNS: 'SELECTCOLUMNS';
SELECTEDMEASURE: 'SELECTEDMEASURE';
SELECTEDMEASUREFORMATSTRING: 'SELECTEDMEASUREFORMATSTRING';
SELECTEDMEASURENAME: 'SELECTEDMEASURENAME';
SELECTEDVALUE: 'SELECTEDVALUE';
SIGN: 'SIGN';
SIN: 'SIN';
SINH: 'SINH';
SQRT: 'SQRT';
SQRTPI: 'SQRTPI';
STARTOFMONTH: 'STARTOFMONTH';
STARTOFQUARTER: 'STARTOFQUARTER';
STARTOFYEAR: 'STARTOFYEAR';
STDEVP: 'STDEV.P';
STDEVS: 'STDEV.S';
STDEVXP: 'STDEVX.P';
STDEVXS: 'STDEVX.S';
SUBSTITUTE: 'SUBSTITUTE';
SUBSTITUTEWITHINDEX: 'SUBSTITUTEWITHINDEX';
SUM: 'SUM';
SUMMARIZE: 'SUMMARIZE';
SUMMARIZECOLUMNS: 'SUMMARIZECOLUMNS';
SUMX: 'SUMX';
SWITCH: 'SWITCH';
TDIST: 'T.DIST';
TDIST2T: 'T.DIST.2T';
TDISTRT: 'T.DIST.RT';
TINV: 'T.INV';
TINV2T: 'T.INV.2T';
TAN: 'TAN';
TANH: 'TANH';
TIME: 'TIME';
TIMEVALUE: 'TIMEVALUE';
TODAY: 'TODAY';
TOPN: 'TOPN';
TOPNPERLEVEL: 'TOPNPERLEVEL';
TOPNSKIP: 'TOPNSKIP';
TOTALMTD: 'TOTALMTD';
TOTALQTD: 'TOTALQTD';
TOTALYTD: 'TOTALYTD';
TREATAS: 'TREATAS';
TRIM: 'TRIM';
TRUE: 'TRUE';
TRUNC: 'TRUNC';
UNICHAR: 'UNICHAR';
UNICODE: 'UNICODE';
UNION: 'UNION';
UPPER: 'UPPER';
USERELATIONSHIP: 'USERELATIONSHIP';
USERNAME: 'USERNAME';
USEROBJECTID: 'USEROBJECTID';
USERPRINCIPALNAME: 'USERPRINCIPALNAME';
UTCNOW: 'UTCNOW';
UTCTODAY: 'UTCTODAY';
VALUE: 'VALUE';
VALUES: 'VALUES';
VARP: 'VAR.P';
VARS: 'VAR.S';
VARXP: 'VARX.P';
VARXS: 'VARX.S';
WEEKDAY: 'WEEKDAY';
YEARFRAC: 'YEARFRAC';
WEEKNUM: 'WEEKNUM';
XIRR: 'XIRR';
XNPV: 'XNPV';
YEAR: 'YEAR';

// New financial DAX functions added June 2020:
ACCRINT: 'ACCRINT';
ACCRINTM: 'ACCRINTM';
AMORDEGRC: 'AMORDEGRC';
AMORLINC: 'AMORLINC';
COUPDAYBS: 'COUPDAYBS';
COUPDAYS: 'COUPDAYS';
COUPDAYSNC: 'COUPDAYSNC';
COUPNCD: 'COUPNCD';
COUPNUM: 'COUPNUM';
COUPPCD: 'COUPPCD';
CUMIPMT: 'CUMIPMT';
CUMPRINC: 'CUMPRINC';
DB: 'DB';
DDB: 'DDB';
DISC: 'DISC';
DOLLARDE: 'DOLLARDE';
DOLLARFR: 'DOLLARFR';
DURATION: 'DURATION';
EFFECT: 'EFFECT';
FV: 'FV';
INTRATE: 'INTRATE';
IPMT: 'IPMT';
ISPMT: 'ISPMT';
MDURATION: 'MDURATION';
NOMINAL: 'NOMINAL';
NPER: 'NPER';
ODDFPRICE: 'ODDFPRICE';
ODDFYIELD: 'ODDFYIELD';
ODDLPRICE: 'ODDLPRICE';
ODDLYIELD: 'ODDLYIELD';
PDURATION: 'PDURATION';
PMT: 'PMT';
PPMT: 'PPMT';
PRICE: 'PRICE';
PRICEDISC: 'PRICEDISC';
PRICEMAT: 'PRICEMAT';
PV: 'PV';
RATE: 'RATE';
RECEIVED: 'RECEIVED';
RRI: 'RRI';
SLN: 'SLN';
SYD: 'SYD';
TBILLEQ: 'TBILLEQ';
TBILLPRICE: 'TBILLPRICE';
TBILLYIELD: 'TBILLYIELD';
VDB: 'VDB';
YIELD: 'YIELD';
YIELDDISC: 'YIELDDISC';
YIELDMAT: 'YIELDMAT';

SAMPLEAXISWITHLOCALMINMAX: 'SAMPLEAXISWITHLOCALMINMAX';
EVALUATEANDLOG: 'EVALUATEANDLOG';
OFFSET: 'OFFSET';
INDEX: 'INDEX';
WINDOW: 'WINDOW';
ORDERBY: 'ORDERBY';
RANK: 'RANK';
ROWNUMBER: 'ROWNUMBER';
PARTITIONBY: 'PARTITIONBY';
EXTERNALMEASURE: 'EXTERNALMEASURE';
KMEANSCLUSTERING: 'KMEANSCLUSTERING';

// Statements:
DEFINE: 'DEFINE';
EVALUATE: 'EVALUATE';
ORDER: 'ORDER';
BY: 'BY';
START: 'START';
AT: 'AT';
RETURN: 'RETURN';
VAR: 'VAR';
IN: 'IN';
ASC: 'ASC';
DESC: 'DESC';
SKIP_: 'SKIP';
DENSE: 'DENSE';
BLANKS: 'BLANKS';
LAST: 'LAST';
FIRST: 'FIRST';

// DATEADD / DATEDIFF interval arguments (in addition to Day, Month, Quarter, Year, which are also functions):
WEEK: 'WEEK';

// CROSSFILTER direction arguments:
BOTH: 'BOTH';
NONE: 'NONE';
ONEWAY: 'ONEWAY';
ONEWAYRIGHTFILTERSLEFT: 'ONEWAY_RIGHTFILTERSLEFT';
ONEWAYLEFTFILTERSRIGHT: 'ONEWAY_LEFTFILTERSRIGHT';

// DATATABLE type arguments (in addition to Currency, which is also a function):
INTEGER: 'INTEGER';
DOUBLE: 'DOUBLE';
STRING: 'STRING';
BOOLEAN: 'BOOLEAN';
DATETIME: 'DATETIME';
VARIANT: 'VARIANT';

TEXT: 'TEXT';
ALPHABETICAL: 'ALPHABETICAL';
KEEP: 'KEEP';
REL: 'REL';

DATE_LITERAL:
	'DT"' (~'"' | '""')* '"' {Text = Text.Substring(3, Text.Length - 4);};
INTEGER_LITERAL: [0-9]+;
REAL_LITERAL: [0-9]* '.' [0-9]+;
STRING_LITERAL:
	'"' (~'"' | '""')* '"' {Text = Text.Substring(1, Text.Length - 2);};
TABLE:
	'\'' (~["\\'\r\n\u0085\u2028\u2029] | '\'\'')* '\'' {Text = Text.Substring(1, Text.Length - 2).Replace("''","'");
		};
COLUMN_OR_MEASURE:
	'[' (~["\]\r\n\u0085\u2028\u2029] | ']]')* ']' {Text = Text.Substring(1, Text.Length - 2).Replace("]]","]");
		};
TABLE_OR_VARIABLE: IdentifierOrKeyword;

OPEN_CURLY: '{';
CLOSE_CURLY: '}';
OPEN_PARENS: '(';
CLOSE_PARENS: ')';
COMMA: ',';
PLUS: '+';
MINUS: '-';
STAR: '*';
DIV: '/';
CARET: '^';
AMP: '&';
ASSIGNMENT: '=';
LT: '<';
GT: '>';
OP_AND: '&&';
OP_OR: '||';
OP_NE: '<>';
OP_LE: '<=';
OP_GE: '>=';

fragment InputCharacter: ~[\r\n\u0085\u2028\u2029];

fragment NewLine:
	'\r\n'
	| '\r'
	| '\n'
	| '\u0085' // <Next Line CHARACTER (U+0085)>'
	| '\u2028' //'<Line Separator CHARACTER (U+2028)>'
	| '\u2029' ; //'<Paragraph Separator CHARACTER (U+2029)>'

fragment Whitespace:
	UnicodeClassZS //'<Any Character With Unicode Class Zs>'
	| '\u0009' //'<Horizontal Tab Character (U+0009)>'
	| '\u000B' //'<Vertical Tab Character (U+000B)>'
	| '\u000C' ; //'<Form Feed Character (U+000C)>'

fragment UnicodeClassZS:
	'\u0020' // SPACE
	| '\u00A0' // NO_BREAK SPACE
	| '\u1680' // OGHAM SPACE MARK
	| '\u180E' // MONGOLIAN VOWEL SEPARATOR
	| '\u2000' // EN QUAD
	| '\u2001' // EM QUAD
	| '\u2002' // EN SPACE
	| '\u2003' // EM SPACE
	| '\u2004' // THREE_PER_EM SPACE
	| '\u2005' // FOUR_PER_EM SPACE
	| '\u2006' // SIX_PER_EM SPACE
	| '\u2008' // PUNCTUATION SPACE
	| '\u2009' // THIN SPACE
	| '\u200A' // HAIR SPACE
	| '\u202F' // NARROW NO_BREAK SPACE
	| '\u3000' // IDEOGRAPHIC SPACE
	| '\u205F' ; // MEDIUM MATHEMATICAL SPACE

fragment IdentifierOrKeyword:
	IdentifierStartCharacter IdentifierPartCharacter*;

fragment IdentifierStartCharacter:
	UnicodeClassLU
	| UnicodeClassLL
	| '_';

fragment IdentifierPartCharacter:
	IdentifierStartCharacter
	| UnicodeClassND;

fragment UnicodeClassLU: '\u0041' ..'\u005a';

fragment UnicodeClassLL: '\u0061' ..'\u007A';

fragment UnicodeClassND: '\u0030' ..'\u0039';